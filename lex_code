/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lexicon.analyzer;

/**
 *
 * @author edtea
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import static java.lang.Character.isLetter;
import static java.lang.Character.isSpace;
import java.util.Scanner;
public class LexiconAnalyzer {

    /**
     * @param args the command line arguments
     */.
     
    //setup
    static int size = 150;
    static int charType;
    static char lexeme[] = new char[size];
    static char nextChar;
    static int lexLength = 0;
    static int tokenClass;
      
    //classes
    static final int LETTER = 0;
    static final int DIGIT = 1;
    static final int UNKNOWN = 99;
    static final int EOF = -1;
    
    //Token codes;
    static final int nums = 60;
    static final int ident = 61;
    static final int equal = 65;
    static final int plus = 73;
    static final int mult = 74;
    static final int sub = 75;
    static final int div = 76;
    static final int rPar = 10;
    static final int lPar = 11;
    static final int rBrack = 12;
    static final int lBrack = 13;
    static final int semi = 29;

    static File inFile = new File("test1.txt");
    
    static FileReader reader;
    public static void main(String[] args) {
        // TODO code application logic here
   
        try{
            reader = new FileReader(inFile);
            getChar();
            do {
                lex();
            }while(reader.read() != -1);
            print("File was found");
        }
        catch(Exception ex){
            print("File not found");  
        }
    }
   
    static void getChar() throws IOException{
         if ((nextChar = (char)reader.read()) != -1) { //if the file is at the end if it's not it...
                    term();
                    if (Character.isLetter(nextChar) == true) {//checks to see if the char is a leter
                        charType = LETTER;
                        
                    } else if (Character.isDigit(nextChar) == true) {//checks to see if the if the char is a digit
                        charType = DIGIT;
                    } else {
                        charType = UNKNOWN;//if its neither than it is a special character that is out through a switch statement 
                    }
                }
            else {
                charType = EOF;//if it is the end of the file the cahracter type is end of file
            }
            //System.out.println("Lexeme length = " + lexLength + " Next char: " + nextChar);
    }
    
    static void lex() throws IOException{
        lexLength = 0;
        getNonWhiteSpace();
        switch(charType){
            case LETTER:
                addChar();
                getChar();
                while(charType == LETTER||charType == DIGIT){
                    addChar();
                    getChar();
                }
                
                break;
            case DIGIT:
                addChar();
                getChar();
                while(charType ==DIGIT){
                    addChar();
                    getChar();
                }
                tokenClass = nums;
                
                break;
            case UNKNOWN:
                    specialChars(nextChar);
                    getChar();
                    
                    break;
            case EOF:
                tokenClass = EOF;
                lexeme[0] = 'E';
                lexeme[1] = 'O';
                lexeme[2] = 'F';
                lexeme[3] = 0;
                break;
        }
        print("Next lexems is:" + lexToString() +", token is: " + tokenClass);
    }
    
    static void getNonWhiteSpace() throws IOException{
        if (isSpace(nextChar)) {
            getChar();
            print("white space!");
        }
    }
    
    static void addChar(){
        
    }
    
    static int specChar(char SpecChar){
        switch (SpecChar){
            case '(':
                addChar();
                tokenClass = lPar;
                break;
            case '{':
                addChar();
                tokenClass = lBrack;
                break;
            case '+':
                addChar();
                tokenClass = plus;
                break;
            case '*':
                addChar();
                tokenClass = mult;
                break;
            case '-':
                addChar();
                tokenClass = sub;
                break;
            case '/':
                addChar();
                tokenClass = div;
                break;
            case '=':
                addChar();
                tokenClass = equal;
                break;
            case ';':
                addChar();
                tokenClass = semi;
                break;
        }
        
        return tokenClass;
    }
    
    static String lexToString(){
        
        String message = "";
        
        for(int i = 0; i < lexLength; i++){
            if(lexeme[i] == 0){
                break;
            }else if(tokenClass == EOF){
                lexeme[0] = 'E';
                lexeme[1] = 'O';
                lexeme[2] = 'F';
                lexeme[3] = 0; 
            }
            message += lexeme[i];
        }
        return  message;
    }
    
    static void term(){
        
    }
    
    
    
    //print method, I hate rewritting it all the time 
    public static void print(String print){
        System.out.println(print);
    }
}
